version: 2.1

workflows:
  main:
    jobs:
      - checkout
      - deps:
          requires:
            - checkout
          matrix:
            parameters:
              python_version:
                - '3.7'
                - '3.8'
                - '3.9'
                - '3.10'
      - lint:
          requires:
            - checkout
            - deps
          matrix:
            parameters:
              python_version:
                - '3.7'
                - '3.8'
                - '3.9'
                - '3.10'
      - test:
          requires:
            - checkout
            - deps
          name: test-<< matrix.python_version >>
          matrix:
            parameters:
              python_version:
                - '3.7'
                - '3.8'
                - '3.9'
                - '3.10'
      - release:
          requires:
            - checkout
            - deps
            - lint
            - test
          filters:
            branches:
              only: master

jobs:
  checkout:
    docker:
      - image: cimg/base:stable
    resource_class: small
    steps:
      - checkout
      - persist_to_workspace:
          root: '.'
          paths:
            - '*'

  deps:
    parameters:
      python_version:
        type: string
    docker:
      - image: cimg/python:<<parameters.python_version>>
    resource_class: medium
    steps:
      - attach_workspace:
          at: '.'
      - restore_cache:
          key: '{{ checksum "poetry.lock" }}-<<parameters.python_version>>'
      - run:
          name: Install deps
          command: |
            python -m venv venv-<<parameters.python_version>>
            source ./venv-<<parameters.python_version>>/bin/activate
            poetry install --no-root -n
      - save_cache:
          paths:
            - "venv-<<parameters.python_version>>"
          key: '{{ checksum "poetry.lock" }}-<<parameters.python_version>>'
      - persist_to_workspace:
          root: '.'
          paths:
            - 'venv-*'

  lint:
    parameters:
      python_version:
        type: string
    docker:
      - image: cimg/python:<<parameters.python_version>>
    resource_class: medium
    steps:
      - attach_workspace:
          at: '.'
      - run:
          name: Lint
          command: |
            source ./venv-<<parameters.python_version>>/bin/activate
            make lint

  test:
    parameters:
      python_version:
        type: string
    docker:
      - image: cimg/python:<<parameters.python_version>>
    steps:
      - attach_workspace:
          at: '.'
      - run:
          name: Run tests
          command: |
            source ./venv-<<parameters.python_version>>/bin/activate
            make test

  release:
    parameters:
      python_version:
        type: string
        default: '3.10'
    docker:
      - image: cimg/python:3.10
    steps:
      - attach_workspace:
          at: '.'
      - run:
          name: Setup Git
          command: |
            git config --global user.email "peijun.ma@pm.me"
            git config --global user.name "Peijun Ma"
      - run:
          name: Release
          command: |
            if [ -n "$(git log -1 --pretty=%B | grep -Fi '[release]')" ]; then
              source ./venv-<<parameters.python_version>>/bin/activate
              poetry publish  -u __token__ -p $PYPI_TOKEN --build

              _version=$(poetry version | awk '{ print $2 }')

              git tag -a "${_version}" -m "Releasing version ${_version}"
              git push origin "${_version}"
            fi
      - run:
          name: Deploy GitHub pages
          command: |
            sudo apt-get update -y
            sudo apt-get install rsync -y

            source ./venv-<<parameters.python_version>>/bin/activate
            make docs
            rsync --list-only  -r docs/_build/html/  | awk '{ print $5 }' | tail -n+2 > list.txt
            git checkout gh-pages
            rsync --files-from=list.txt -R docs/_build/html/ .
            cat list.txt | xargs  git add

            mkdir -p ~/.ssh
            echo 'github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==
            github.com ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBEmKSENjQEezOmxkZMy7opKgwFB9nkt5YRrYMjNuG5N87uRgg6CLrbo5wAdT/y6v0mKV0U2w0WZ2YB/++Tpockg=
            github.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOMqqnkVzrm0SdG6UOoqKLsabgH5C9okWi0dh2l9GKJl
            bitbucket.org ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAubiN81eDcafrgMeLzaFPsw2kNvEcqTKl/VqLat/MaB33pZy0y3rJZtnqwR2qOOvbwKZYKiEO1O6VqNEBxKvJJelCq0dTXWT5pbO2gDXC6h6QDXCaHo6pOHGPUy+YBaGQRGuSusMEASYiWunYN0vCAI8QaXnWMXNMdFP3jHAJH0eDsoiGnLPBlBp4TNm6rYI74nMzgz3B9IikW4WVK+dc8KZJZWYjAuORU3jc1c/NPskD2ASinf8v3xnfXeukU0sJ5N6m5E8VLjObPEO+mN2t/FZTMZLiFqPWc/ALSqnMnnhwrNi2rbfg/rd/IpL8Le3pSBne8+seeFVBoGqzHM9yXw==
            gitlab.com ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBFSMqzJeV9rUzU4kWitGjeR4PWSa29SPqJ1fVkhtj3Hw9xjLVXVYrU9QlYWrOLXBpQ6KWjbjTDTdDkoohFzgbEY=' >> ~/.ssh/known_hosts


            git commit -m "Deploy to GitHub pages"
            git push --force-with-lease origin gh-pages
